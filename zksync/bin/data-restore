#!/bin/bash

USAGE='Usage: zksync data-restore [-h|--help|restart|continue|run|check] [EXPECTED_HASH]
where:
    -h | --help       show this message
    restart           wipe the database and run data restore in finite mode (default)
    continue          run data restore in 'continue' mode
    run               do not wipe the database and run data restore in finite mode
    check             wipe the database, run the data restore in finite mode and check the root hash.
                      Root hash must be provided as a single argument of hexadecimal string
    check-existing    like `check`, but instead of taking expected hash as an argument, it is loaded
                      from the database before wiping it
    fetch-root-hash   find the hash of the latest verified block and print it to the stdout'

if [ -z $ZKSYNC_ENV ];
then 
  echo "$USAGE"
  exit 1
fi

BLOCK_HASH_ERR="Error: Unable to load the latest block hash" 

function fetch_root_hash {
  # Select the latest verified block and find its hash
  QUERY="WITH last_block (number) AS (SELECT max(block_number) FROM operations WHERE action_type = 'VERIFY' and confirmed = true)
       SELECT encode(root_hash, 'hex') FROM blocks, last_block WHERE blocks.number = last_block.number;"
  # By piping we make `psql` simply return value instead of drawing the table.
  # `xargs` is used to trim spaces around the value.
  BLOCK_HASH=`echo $QUERY | psql "$DATABASE_URL" -t | xargs`

  if [ -z "$BLOCK_HASH" ]
  then
      echo "$BLOCK_HASH_ERR"
      exit 1
  fi

  echo $BLOCK_HASH
}

COMMAND=${1:-restart}

case $COMMAND in
  restart)
      zksync db-reset
      f cargo run --bin zksync_data_restore --release -- --genesis --finite
    ;;
  restart)
      f cargo run --bin zksync_data_restore --release -- --continue
    ;;
  run)
      f cargo run --bin zksync_data_restore --release -- --genesis --finite
    ;;
  check)
      EXPECTED_HASH=$2
      zksync db-reset
      f cargo run --bin zksync_data_restore --release -- --genesis --finite --final_hash $EXPECTED_HASH
    ;;
  check-existing)
      EXPECTED_HASH=`fetch_root_hash`
      # This kludge is required, as bash scripts don't really support returning values from function
      # Instead, we are parsing result of the execution of `fetch_root_hash` and check if it's
      # indicating the error.
      if [ "$EXPECTED_HASH" == "$BLOCK_HASH_ERR" ]; then
        echo "$BLOCK_HASH_ERR"
        exit 1
      fi
      echo "Expected hash is $EXPECTED_HASH"
      zksync db-reset
      f cargo run --bin zksync_data_restore --release -- --genesis --finite --final_hash $EXPECTED_HASH
    ;;
  fetch-root-hash)
      fetch_root_hash
    ;;
  -h | --help)
      echo "$USAGE"
      exit 0
    ;;
  *)
      echo "Unknown Data Restore command"
      echo "$USAGE"
      exit 1
    ;;
esac
