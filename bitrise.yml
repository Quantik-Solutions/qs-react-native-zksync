---
format_version: '8'
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git
project_type: react-native
trigger_map:
- push_branch: ios
  workflow: ios
workflows:
  android:
    steps:
    - activate-ssh-key@4:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - git-clone@4: {}
    - cache-pull@2:
        inputs:
        - is_debug_mode: 'true'
    - script@1:
        title: Install Rust & Build Libraries
        inputs:
        - is_debug: 'yes'
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x
            # install rust
            curl https://sh.rustup.rs -o rustup_init.sh

            #sh ./rustup_init.sh --default-toolchain nightly -y
            sh ./rustup_init.sh -y

            source $HOME/.cargo/env

            cargo install cargo-ndk
            cargo install cargo-lipo
            cargo install cbindgen


            # Android targets
            rustup target add aarch64-linux-android armv7-linux-androideabi i686-linux-android x86_64-linux-android

            cd ./zksync/sdk/zksync-java
            # verify before executing this that you have the proper targets installed
            cargo ndk --target aarch64-linux-android --android-platform 23 -- build --release
            cargo ndk --target armv7-linux-androideabi --android-platform 23 -- build --release
            cargo ndk --target i686-linux-android --android-platform 23 -- build --release
            cargo ndk --target x86_64-linux-android --android-platform 23 -- build --release
            # moving libraries to the android project

            jniLibs=$HOME/android/src/main/jniLibs
            libName=libzksync.so

            rm -rf ${jniLibs}

            mkdir ${jniLibs}
            mkdir ${jniLibs}/arm64-v8a
            mkdir ${jniLibs}/armeabi-v7a
            mkdir ${jniLibs}/x86
            mkdir ${jniLibs}/x86_64

            cp ./target/aarch64-linux-android/release/${libName} ${jniLibs}/arm64-v8a/${libName}
            cp ./target/armv7-linux-androideabi/release/${libName} ${jniLibs}/armeabi-v7a/${libName}
            cp ./target/i686-linux-android/release/${libName} ${jniLibs}/x86/${libName}
            cp ./target/x86_64-linux-android/release/${libName} ${jniLibs}/x86_64/${libName}
    - install-react-native@0: {}
    - npm@1:
        inputs:
        - cache_local_deps: 'true'
        - command: install -g detox-cli
    - yarn@0:
        inputs:
        - verbose_log: 'yes'
        - command: install
    - yarn@0:
        inputs:
        - workdir: example
        - command: install
    - react-native-bundle@1:
        inputs:
        - entry_file: example/index.js
        - platform: android
    - script@1:
        title: Detox Utils
        inputs:
        - is_debug: 'yes'
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            brew tap wix/brew
            brew install applesimutils

            cd example
            detox build --configuration android.emu.debug
            detox test --configuration android.emu.debug --cleanup
    - cache-push@2:
        inputs:
        - is_debug_mode: 'true'
        - cache_paths: "$CARGO_INSTALL_DIR\n"
        is_always_run: true
    - deploy-to-bitrise-io@1: {}
  ios:
    steps:
    - activate-ssh-key@4:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - git-clone@4: {}
    - brew-install@0: {}
    - script@1:
        title: Install Rust & Build Libraries
        inputs:
        - is_debug: 'yes'
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            bash ./rust_build.sh

            bash ./ios_build.sh
    - npm@1:
        inputs:
        - cache_local_deps: 'true'
        - command: install -g detox-cli
    - yarn@0:
        inputs:
        - verbose_log: 'yes'
        - command: install
    - yarn@0:
        inputs:
        - workdir: example
        - verbose_log: 'yes'
        - command: install
    - react-native-bundle@1:
        inputs:
        - entry_file: example/index.js
    - script@1:
        title: Detox Util Install
        inputs:
        - is_debug: 'yes'
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            brew tap wix/brew
            brew install applesimutils

            detox build --configuration ios.sim.release
            detox test --configuration ios.sim.release --cleanup
    - deploy-to-bitrise-io@1: {}
app:
  envs:
  - opts:
      is_expand: false
    PROJECT_LOCATION: example/android
  - opts:
      is_expand: false
    MODULE: Example / Base Testing Application
  - opts:
      is_expand: false
    VARIANT: Debug
  - opts:
      is_expand: false
    BITRISE_PROJECT_PATH: example/ios/example.xcodeproj
  - opts:
      is_expand: false
    BITRISE_SCHEME: example
  - opts:
      is_expand: false
    BITRISE_EXPORT_METHOD: development
  - opts:
      is_expand: false
    CARGO_INSTALL_DIR: "/Users/vagrant/.cargo"
