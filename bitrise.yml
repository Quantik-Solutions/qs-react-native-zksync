---
format_version: '8'
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git
project_type: react-native
workflows:
  android:
    steps:
    - activate-ssh-key@4:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - git-clone@4: {}
    - cache-pull@2:
        inputs:
        - is_debug_mode: 'true'
    - brew-install@0:
        inputs:
        - cache_enabled: 'yes'
        - verbose_log: 'yes'
        - packages: sccache
    - script@1:
        title: Install Rust & Build Libraries
        inputs:
        - is_debug: 'yes'
        - content: |
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            bash ./build.sh
            bash ./android_build.sh
    - install-react-native@0: {}
    - npm@1:
        inputs:
        - cache_local_deps: 'true'
        - command: install -g detox-cli
    - yarn@0:
        inputs:
        - verbose_log: 'yes'
        - command: install
    - yarn@0:
        inputs:
        - workdir: example
        - command: install
    - react-native-bundle@1:
        inputs:
        - entry_file: example/index.js
        - platform: android
    - cache-push@2:
        inputs:
        - is_debug_mode: 'true'
        - compress_archive: 'true'
        - cache_paths: |-
            $CARGO_INSTALL_DIR
            $SCCACHE_DIR
        is_always_run: true
    - wait-for-android-emulator@1: {}
    - script@1:
        title: Detox Utils
        inputs:
        - is_debug: 'yes'
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            brew tap wix/brew
            brew install applesimutils

            cd $TEST_PROJECT_ROOT
            detox build --configuration android.emu.release.bitrise
            detox test --configuration android.emu.release.bitrise --cleanup
    - deploy-to-bitrise-io@1: {}
  ios:
    steps:
    - activate-ssh-key@4:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - git-clone@4: {}
    - cache-pull@2:
        inputs:
        - is_debug_mode: 'true'
    - brew-install@0:
        inputs:
        - cache_enabled: 'yes'
        - verbose_log: 'yes'
        - packages: sccache
    - script@1:
        title: Install Rust & Build Libraries
        inputs:
        - is_debug: 'yes'
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            bash $PROJECT_ROOT/build.sh
            bash $PROJECT_ROOT/ios_build.sh
    - install-react-native@0: {}
    - npm@1:
        inputs:
        - cache_local_deps: 'true'
        - command: install -g detox-cli
    - yarn@0:
        inputs:
        - verbose_log: 'yes'
        - cache_local_deps: 'yes'
        - command: install
    - yarn@0:
        inputs:
        - workdir: example
        - command: install
    - react-native-bundle@1:
        inputs:
        - entry_file: example/index.js
    - cache-push@2:
        inputs:
        - is_debug_mode: 'true'
        - compress_archive: 'true'
        - cache_paths: |-
            $CARGO_INSTALL_DIR
            $SCCACHE_DIR
        is_always_run: true
    - script@1:
        title: Detox Utils
        inputs:
        - is_debug: 'yes'
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            brew tap wix/brew
            brew install applesimutils

            cd $TEST_PROJECT_ROOT
            detox build --configuration ios.sim.debug
            detox test --configuration ios.sim.debug --cleanup
    - deploy-to-bitrise-io@1: {}
  test:
    steps:
    - activate-ssh-key@4:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - git-clone@4: {}
    - cache-pull@2:
        inputs:
        - is_debug_mode: 'true'
    - brew-install@0:
        inputs:
        - cache_enabled: 'yes'
        - verbose_log: 'yes'
        - packages: sccache
    - script@1:
        title: Install Rust & Build Libraries
        inputs:
        - is_debug: 'yes'
        - content: |
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            # Set the home variable
            home=$HOME
            #if [ ! -d "/Users/vagrant" ]; then
            #  home=/Users/vagrant
            #else
            #  exit 1
            #fi

            # Check for cargo folder
            if [ ! -d "${home}/.cargo" ]; then
              echo "Installing Rust"

              # install rust
              curl https://sh.rustup.rs -o rustup_init.sh
              sh ./rustup_init.sh --default-toolchain nightly -y
              sh ./rustup_init.sh -y
            else
              echo "Previous Rust found"
            fi

            # shellcheck disable=SC1090
            source "${home}"/.cargo/env
            rustup default nightly

            # Check for needed cargo utils
            if ! command -v cargo-ndk &>/dev/null; then
              echo "Installing Cargo-NDK"
              cargo install cargo-ndk
            else
              echo "Cargo-NDK found"
            fi

            if ! command -v cargo-lipo &>/dev/null; then
              echo "Installing Cargo-Lipo"
              cargo install cargo-lipo
            else
              echo "Cargo-Lipo found"
            fi

            if ! command -v cbindgen &>/dev/null; then
              echo "Installing cbindgen"
              cargo install cbindgen
            else
              echo "cbindgen found"
            fi

            if ! command -v sccache &>/dev/null; then
              echo "Installing sccache"
              brew install sccache
            else
              echo "sccache found"
            fi

            if [ ! -d "${home}"/sccache_dir ]; then
              echo "Creating SC Cache Directory"
              mkdir "${home}"/sccache_dir
            else
              echo "previous sccache_dir found"
            fi

            if [ ! -a "${home}/.cargo/config.toml" ]; then
            echo '
            [build]
            rustc-wrapper = "/usr/local/bin/sccache"
            incremental = false
            ' >> ./config.toml
            fi

            MIN_VERSION=23

            # Set the HOME variable
            HOME=$HOME
            #if [ ! -d "/Users/vagrant" ]; then
            #  HOME=/Users/vagrant
            #else
            #  exit 1
            #fi

            # Make sure we have rust in scope
            source "${HOME}"/.cargo/env

            # Android targets
            rustup target add aarch64-linux-android armv7-linux-androideabi i686-linux-android x86_64-linux-android

            # Go to zkSync library directory to build
            cd "$ZKSYNC_LIB_DIR" || exit 1

            # Build the android aar releases
            cargo ndk --target aarch64-linux-android --android-platform ${MIN_VERSION} -- build --release
            cargo ndk --target armv7-linux-androideabi --android-platform ${MIN_VERSION} -- build --release
            cargo ndk --target i686-linux-android --android-platform ${MIN_VERSION} -- build --release
            cargo ndk --target x86_64-linux-android --android-platform ${MIN_VERSION} -- build --release

            # Move results into native module directory to be used
            ANDROID_JNI_ROOT="${HOME}"/git/android/src/main/jniLibs
            LIB_NAME=libzksync.so

            rm -rf "${ANDROID_JNI_ROOT}"

            mkdir "${ANDROID_JNI_ROOT}"
            mkdir "${ANDROID_JNI_ROOT}"/arm64-v8a
            mkdir "${ANDROID_JNI_ROOT}"/armeabi-v7a
            mkdir "${ANDROID_JNI_ROOT}"/x86
            mkdir "${ANDROID_JNI_ROOT}"/x86_64

            cp "$ZKSYNC_LIB_DIR"/target/aarch64-linux-android/release/${LIB_NAME} "${ANDROID_JNI_ROOT}"/arm64-v8a/${LIB_NAME}
            cp "$ZKSYNC_LIB_DIR"/target/armv7-linux-androideabi/release/${LIB_NAME} "${ANDROID_JNI_ROOT}"/armeabi-v7a/${LIB_NAME}
            cp "$ZKSYNC_LIB_DIR"/target/i686-linux-android/release/${LIB_NAME} "${ANDROID_JNI_ROOT}"/x86/${LIB_NAME}
            cp "$ZKSYNC_LIB_DIR"/target/x86_64-linux-android/release/${LIB_NAME} "${ANDROID_JNI_ROOT}"/x86_64/${LIB_NAME}

            # List devices
            adb devices

            # iOS targets
            rustup target add aarch64-apple-ios x86_64-apple-ios

            # Go to zkSync library directory to build
            cd "$ZKSYNC_LIB_DIR" || exit 1

            # Create C headers & package into iOS library release
            cbindgen src/lib.rs -l c > ZkSync.h
            cargo lipo --release

            # Move results into native module directory to be used
            inc=$PROJECT_ROOT/ios/include
            libs=$PROJECT_ROOT/ios/libs

            mkdir "${inc}"
            mkdir "${libs}"

            cp ZkSync.h "${inc}"
            cp "$ZKSYNC_LIB_DIR"/target/universal/release/libzksync.a "${libs}"
    - install-react-native@0: {}
    - npm@1:
        inputs:
        - cache_local_deps: 'true'
        - command: install -g detox-cli
    - yarn@0:
        inputs:
        - verbose_log: 'yes'
        - command: install
    - yarn@0:
        inputs:
        - workdir: example
        - command: install
    - react-native-bundle@1:
        inputs:
        - entry_file: example/index.js
        - platform: android
    - cache-push@2:
        inputs:
        - is_debug_mode: 'true'
        - compress_archive: 'true'
        - cache_paths: |-
            $CARGO_INSTALL_DIR
            $SCCACHE_DIR
        is_always_run: true
    - wait-for-android-emulator@1: {}
    - script@1:
        title: Detox Utils
        inputs:
        - is_debug: 'yes'
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            brew tap wix/brew
            brew install applesimutils

            cd $TEST_PROJECT_ROOT
            detox build --configuration android.emu.release.bitrise
            detox test --configuration android.emu.release.bitrise --cleanup
    - deploy-to-bitrise-io@1: {}
app:
  envs:
  - opts:
      is_expand: false
    PROJECT_LOCATION: "/Users/vagrant/git/example/android"
  - opts:
      is_expand: false
    MODULE: Example / Base Testing Application
  - opts:
      is_expand: false
    VARIANT: Debug
  - opts:
      is_expand: false
    BITRISE_PROJECT_PATH: example/ios/example.xcodeproj
  - opts:
      is_expand: false
    BITRISE_SCHEME: example
  - opts:
      is_expand: false
    BITRISE_EXPORT_METHOD: development
  - opts:
      is_expand: false
    CARGO_INSTALL_DIR: "/Users/vagrant/.cargo"
  - opts:
      is_expand: false
    NATIVE_MODULE_ANDROID_DIR: "/Users/vagrant/git/android"
  - opts:
      is_expand: false
    SCCACHE_DIR: "/Users/vagrant/sccache_dir"
  - opts:
      is_expand: false
    TEST_PROJECT_ROOT: "/Users/vagrant/git/example"
  - opts:
      is_expand: false
    PROJECT_ROOT: "/Users/vagrant/git"
  - opts:
      is_expand: false
    ZKSYNC_LIB_DIR: "/Users/vagrant/git/zksync/sdk/zksync-native"
  - opts:
      is_expand: false
    DEBUG_APK: "/Users/vagrant/git/example/android/app/build/outputs/apk/debug/app-debug.apk"
trigger_map:
- push_branch: ios
  workflow: ios
